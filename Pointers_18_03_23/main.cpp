/*
Вычислить максимально возможный адресуемый объем памяти если разрядность адреса составляет 8 Байт
Написать функцию int Sum(int n ... ), которая принимает произвольное число параметров, и возвращает сумму всех принятых параметров
Чтобы показать что функция примает произвольное чило аргументов, достаточно в конце списка принимаемых параметров поставить
Например: int Sum(int n ... ); Программу обязательно нужно скомпилировать в архитектуру x86 
*/

#include<iostream>
#include<stdarg.h>
using namespace std;
using std::cin;
using std::cout;
using std::endl;

int Sum(int n, ...);

// #define tab "\t"
// 4 Byte = 2 в степени (32) или 2 в (32)
// 4 Byte = 4 GByte
// 8 Byte = 2 в степени ( 64)  или 2 (60) * 2(4)
// 8 Byte = 4 Эксабайт 

// #define POINTER_BASICS
// #define MASSIV
#define FUNCTION_VAR_ARG

void main()
{
	setlocale(LC_ALL, "Rus");
#ifdef POINTERS_BASICS

	int a = 2;
	int* pa = &a;         // объединение "ра" и инициализация его адресом переменной "а"
	cout << a << endl;    // вывод значения переменной а
	cout << &a << endl;   // взятие адреса переменной "а" прямо при выводе
	cout << pa << endl;   // вывод адреса переменной "а", хранящегося в указателе "ра"
	cout << *pa << endl;  // разъименование указателя "ра" и получение значения
	                      // *оператор разименования 
	pa;                   // обращение к адресу работа с адресом
	*pa;                  // обращение по адресу и работа со значением
	int* pd;              // объявдяем указатель без инициализации
	int b = 3;
	// *pd = &b           // так неправильно - хдесь мы в значении по адресу пытаемся записать адрес 
	pd = &b;              // правильно писать так
	// int* - указатель на 'int'
    // double  - double
    // double* - указатель на double
	cout << *pd << endl;

	/*
	& - Оператор взятия адреса (Адрес оператора)
	* - Оператор разыменования (Оператор разыменования)

	к указателям можно применять арифметические операции
	результат операыии будет зависеть от размера целевого типа
	*/

#endif POINTERS_BASICS
#ifdef MASSIV

	const int n = 5;
	int arr[n] = { 3, 5, 8, 13, 21 };
	cout << arr << endl;        // указание на адрес массива
	cout << *arr << endl;       // разименовать указатель на адрес массива - выйдет значение нулевого элемента массива
	for (int i = 0; i < n; i++)
	{
		cout << arr + i << tab; // выводит адресаа элементов масива

	}
	cout << endl;
#endif // MASSIV

	cout << Sum(3, 8, 8, 13, 21, 34, 0) << endl;
}

#ifdef FUNCTION_VAR_ARG

int Sum(int n, ...)    // объявление функции с неизвестными параметрами 
{
	int sum = 0;       // инициализация значения суммы в ноль

	/* int* pn = &n;   // взятие адреса у первого прараметра  "P" - параметры

	while (*pn !=0)    // пока встречаются параметры
	{
		sum += *pn++;  // прибавляем к сумме то что взяли по адресу Р
		               // смена текущего адреса на следующий
	} */

	for (int* pn = &n; *pn; pn++) sum += *pn;
	return sum;
}
#endif // FUNCTION_VAR_ARG
